cmake_minimum_required(VERSION 3.22)
set(CMAKE_CXX_STANDARD 23)
set(CXX_VERSION_NAME "cxx_std_${CMAKE_CXX_STANDARD}")
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# TOGGLE TESTING
set(MAIN_TEST OFF)

# TOGGLE EXAMPLES
set(EXAMPLES OFF)

# TOGGLE .DLL IN INSTALLS
set(INSTALL_DLLS OFF)

# SWITCHES FOR PROJECTS
set(MPE_PROJECTS ON)

set(MPE_PROJECT_DUMMY OFF)
set(MPE_PROJECT_SANDBOX OFF)
set(MPE_PROJECT_PROJECTPICKER ON)
set(MPE_PROJECT_PONG OFF)
set(MPE_PROJECT_OPENCVTEST OFF)
set(MPE_PROJECT_ANGLETEST OFF)
set(MPE_PROJECT_FREETYPE OFF)
set(MPE_PROJECT_OPENAL OFF)

# UNIX
set(MPE_USE_X11 ON)

# CURRENTLY NOT SUPPORTED AND NOT USED:
set(MPE_USE_WAYLAND OFF)

# GRAPHICS APIs
set(MPE_OPENGL ON)
set(MPE_OPENGLES OFF)

# ANGLE
if(MPE_OPENGLES)
  set(MPE_ANGLE ON)
else()
  set(MPE_ANGLE OFF)
endif()

# SHARED OR STATIC LIBRARY
# ONLY 'STATIC' OR 'SHARED'
# SPECIFIC PLATFORMS MIGHT FORCE STATIC ONLY OR SHARED ONLY LIBRARIES
set(MPE_LIBRARY_TYPE SHARED)
set(MPE_EDITOR_LIBRARY_TYPE SHARED)

# SETTING PROJECT VERSION
set(PROJECT_VERSION_MAJOR 0)
set(PROJECT_VERSION_MINOR 0)
set(PROJECT_VERSION_PATCH 0)
set(PROJECT_VERSION_TWEAK 1)
set(PROJECT_VERSION_SUFFIX "A9")
set(PROJECT_VERSION
  ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}.${PROJECT_VERSION_TWEAK}
)
set(PROJECT_FULL_VERSION
  ${PROJECT_VERSION_MAJOR}${PROJECT_VERSION_MINOR}${PROJECT_VERSION_PATCH}${PROJECT_VERSION_TWEAK}${PROJECT_VERSION_SUFFIX}
)

# CREATING PROJECT
if(WIN32)
  project(MERELY_PRIMITIVE_ENGINE VERSION ${PROJECT_VERSION} LANGUAGES C CXX)
elseif(APPLE)
  # ENABLE OBJECTIVE-C AND OBJECTIVE-C++
  project(MERELY_PRIMITIVE_ENGINE VERSION ${PROJECT_VERSION} LANGUAGES C CXX OBJC OBJCXX)

# TODO: RESOLVE DYLIB TARGET LINKING POST BUILD
# MAKE SURE THAT ALL DYLIBS ARE REDIRECTED TO WHERE THE BUILD IS
# set(CMAKE_MACOSX_RPATH ON)
# set(CMAKE_SKIP_RPATH OFF)
# set(CMAKE_BUILD_WITH_INSTALL_RPATH ON)
# set(CMAKE_INSTALL_RPATH "@executable_path")
else()
  project(MERELY_PRIMITIVE_ENGINE VERSION ${PROJECT_VERSION} LANGUAGES C CXX)
endif()

# ARTIFACTS GENERATED BY CPM
set(BUILD_TYPE_FILE "${PROJECT_SOURCE_DIR}/Artifacts/.BUILD_TYPE")
set(CROSS_COMPILE_FILE "${PROJECT_SOURCE_DIR}/Artifacts/.CROSS_COMPILE_TARGET")
set(VCPKG_ROOT_PATH_FILE "${PROJECT_SOURCE_DIR}/Artifacts/.VCPKG_ROOT_PATH")
set(VCPKG_TOOLCHAIN_PATH_FILE "${PROJECT_SOURCE_DIR}/Artifacts/.VCPKG_TOOLCHAIN_PATH")

# DETECT BUILD TYPE
if(EXISTS ${BUILD_TYPE_FILE})
  file(READ ${BUILD_TYPE_FILE} BUILD_TYPE_SETUP_OUTPUT)
  string(STRIP ${BUILD_TYPE_SETUP_OUTPUT} BUILD_TYPE_SETUP_OUTPUT)
  set(CMAKE_BUILD_TYPE ${BUILD_TYPE_SETUP_OUTPUT})
  message(STATUS "DETECTED BUILD TYPE: ${CMAKE_BUILD_TYPE}")
else()
  message(FATAL_ERROR "BUILD TYPE NOT DETECTED: ${BUILD_TYPE_FILE}")
endif()

# DETECT CROSS-COMPILATION
if(EXISTS ${CROSS_COMPILE_FILE})
  file(READ ${CROSS_COMPILE_FILE} CROSS_COMPILATION_TARGET_OUTPUT)
  string(STRIP ${CROSS_COMPILATION_TARGET_OUTPUT} CROSS_COMPILATION_TARGET_OUTPUT)
  set(CROSS_COMPILATION_TARGET ${CROSS_COMPILATION_TARGET_OUTPUT})

  # IF EMPTY THEN SET CROSS_COMPILATION TO OFF
  if(CROSS_COMPILATION_TARGET STREQUAL "")
    set(CROSS_COMPILATION OFF)
  else()
    set(CROSS_COMPILATION ON)
  endif()
else()
  message(STATUS "CROSS-COMPILATION NOT DETECTED.")
  set(CROSS_COMPILATION OFF)
endif()

if(CROSS_COMPILATION)
  message(STATUS "CROSS COMPILATION: ${CROSS_COMPILATION_TARGET}")
endif()

# SET AVAILABLE BUILD TYPES TO DEBUG AND RELEASE
# TODO: OpenCV throws generation errors if other build types are used
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "" FORCE)

# ENFORCE BUILD TYPE BASED ON ARTIFACT
# SET CMAKE VERBOSITY BASED ON BUILD TYPE
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(INSTALL_PATH_SUFFIX "Debug")
  set(CMAKE_BUILD_TYPE Debug)
  set(VERBOSE
    ON
    CACHE INTERNAL "Verbosity on")
  set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
  set(INSTALL_PATH_SUFFIX "Release")
  set(CMAKE_BUILD_TYPE Release)
  set(VERBOSE
    OFF
    CACHE INTERNAL "Verbosity off")
  set(CMAKE_EXPORT_COMPILE_COMMANDS FALSE)
else()
  # THIRD LAYER OF SECURITY TO BUILD ONLY DEBUG AND RELEASE
  set(INSTALL_PATH_SUFFIX "Unknown")
  set(VERBOSE
    ON
    CACHE INTERNAL "Verbosity on")
  message(FATAL_ERROR "UNKNOWN BUILD TYPE: \"${CMAKE_BUILD_TYPE}\".")
endif()

if(${VERBOSE})
  message("
-----------------------------------------------------------
* PROJECT NAME: ${PROJECT_NAME}
* PROJECT VERSION: ${PROJECT_VERSION}
* PROJECT FULL VERSION: ${PROJECT_FULL_VERSION}
-----------------------------------------------------------")
endif()

# PATH TO INSTALLATION DIRECTORY
set(CMAKE_INSTALL_PREFIX
  "${CMAKE_CURRENT_SOURCE_DIR}/Install/${CMAKE_BUILD_TYPE}"
  CACHE PATH "Installation Directory" FORCE)

if(${VERBOSE})
  message("
-----------------------------------------------------------
* DEFAULT INSTALLATION DIRECTORY: \"${CMAKE_INSTALL_PREFIX}\"
-----------------------------------------------------------\n")
endif()

# CHECKING PLATFORM
string(TOUPPER "${CMAKE_SYSTEM_NAME}" CURRENT_PLATFORM)

# DOUBLE CHECKS IF THE SYSTEM IS RUNNING ON X64 SYSTEM THIS ALSO FAILS IF THE COMPILER IS NOT 64-BIT COMPATIBLE
if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
  message(STATUS "SIZE OF VOID POINTER: ${CMAKE_SIZEOF_VOID_P}")
  message(FATAL_ERROR "MPE SUPPORTS X64 SYSTEMS ONLY.")
  return()
else()
  message(STATUS "SIZE OF VOID POINTER: ${CMAKE_SIZEOF_VOID_P}")
endif()

# SETTING UP COMPILER
if(${VERBOSE})
  message(STATUS "SETTING UP COMPILER...")
endif()

if(${CROSS_COMPILATION})
  string(TOLOWER "${CROSS_COMPILATION_TARGET}" LOVER_CROSS_COMPILATION_TARGET)

  if(LOVER_CROSS_COMPILATION_TARGET STREQUAL "rpi4")
    set(CURRENT_COMPILER "GNU")
    set(COMPILATION_PLATFORM "RPI4")
  else()
    message(FATAL_ERROR "COMPILER: {${CMAKE_CXX_COMPILER_ID}} NOT SUPPORTED.")
  endif()

  # DEBUGGING FOR CROSS-COMPILATION
  message(STATUS "C Compiler: ${CMAKE_C_COMPILER}")
  execute_process(
    COMMAND ${CMAKE_C_COMPILER} --version
    OUTPUT_VARIABLE C_COMPILER_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  message(STATUS "C Compiler version: ${C_COMPILER_VERSION}")

  message(STATUS "C++ Compiler: ${CMAKE_CXX_COMPILER}")
  execute_process(
    COMMAND ${CMAKE_CXX_COMPILER} --version
    OUTPUT_VARIABLE CXX_COMPILER_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  message(STATUS "C++ Compiler version: ${CXX_COMPILER_VERSION}")
else()
  string(TOLOWER "${CMAKE_CXX_COMPILER_ID}" LOWER_COMPILER_ID)

  if(LOWER_COMPILER_ID STREQUAL "msvc")
    set(CURRENT_COMPILER "MSVC")
    set(COMPILATION_PLATFORM "WIN32")
  elseif(LOWER_COMPILER_ID STREQUAL "gnu")
    set(CURRENT_COMPILER "GNU")
    set(COMPILATION_PLATFORM "UNIX")
  elseif(LOWER_COMPILER_ID STREQUAL "clang")
    set(CURRENT_COMPILER "CLANG")
    set(COMPILATION_PLATFORM "UNIX")
  elseif(LOWER_COMPILER_ID STREQUAL "appleclang")
    set(CURRENT_COMPILER "APPLECLANG")
    set(COMPILATION_PLATFORM "OSX")
  else()
    message(FATAL_ERROR "COMPILER: {${CMAKE_CXX_COMPILER_ID}} NOT SUPPORTED.")
  endif()
endif(${CROSS_COMPILATION})

if(${VERBOSE})
  message("
-----------------------------------------------------------
* CURRENT COMPILER PATH: ${CMAKE_CXX_COMPILER}
* CURRENT COMPILER: ${CURRENT_COMPILER}
* CURRENT COMPILER VERSION: ${CMAKE_CXX_COMPILER_VERSION}
* CXX VERSION: ${CXX_VERSION_NAME}
* CXX STANDARD: ${CMAKE_CXX_STANDARD}
* CURRENT PLATFORM: ${COMPILATION_PLATFORM}
* CURRENT SYSTEM: ${CURRENT_PLATFORM}
* COMPILER SETUP COMPLETE.
-----------------------------------------------------------")
endif(${VERBOSE})

set(VENDOR_DIR ${PROJECT_SOURCE_DIR}/Vendor/${COMPILATION_PLATFORM})
set(UNIVERSAL_VENDOR_DIR ${PROJECT_SOURCE_DIR}/Vendor/UNIVERSAL)

message("
-----------------------------------------------------------
* CURRENT VENDOR DIRECTORY: ${VENDOR_DIR}
* UNIVERSAL VENDOR DIRECTORY: ${UNIVERSAL_VENDOR_DIR}
-----------------------------------------------------------")

# INCLUDE CMAKE UTILITIES
include("${PROJECT_SOURCE_DIR}/CMake/Utilities/utilities.cmake")

# DEPENDENCY MANAGEMENT
include("${PROJECT_SOURCE_DIR}/CMake/Platform/Dependencies/dependencies_platform.cmake")

if(COMPILATION_PLATFORM STREQUAL "UNIX" OR COMPILATION_PLATFORM STREQUAL "RPI4")
  message("
-----------------------------------------------------------
HARD SETTINGS LIBRARY AS STATIC ON UNIX SYSTEMS DUE TO FAILURE OF IMGUI
-----------------------------------------------------------\n")
  set(MPE_LIBRARY_TYPE STATIC)
  set(MPE_EDITOR_LIBRARY_TYPE STATIC)
endif(COMPILATION_PLATFORM STREQUAL "UNIX" OR COMPILATION_PLATFORM STREQUAL "RPI4")

if(COMPILATION_PLATFORM STREQUAL "RPI4")
  # message("
  # -----------------------------------------------------------
  # SETTING CMAKE_PREFIX_PATH TO '/usr/local'
  # -----------------------------------------------------------\n")

  # set(CMAKE_PREFIX_PATH "/usr/local")
  if(MPE_OPENGL)
    message(FATAL_ERROR "OPENGL NOT SUPPORTED ON RPI4.")
  endif()
endif(COMPILATION_PLATFORM STREQUAL "RPI4")

# ADDING DEPENDENCIES
if(${VERBOSE})
  message("
-----------------------------------------------------------
LOOKING FOR GLOBAL DEPENDENCIES...
-----------------------------------------------------------")
endif()

# FIND DEPENDCIES PROVIDED BY DEPENDENCY MANAGER
include("${PROJECT_SOURCE_DIR}/CMake/Platform/GlobalDependencies/global_dependencies_platform.cmake")

if(${VERBOSE})
  message("
-----------------------------------------------------------
ALL DEPENDENCIES FOUND
-----------------------------------------------------------")
endif()

# ADDING TESTING ENVIRONMENT
if(${VERBOSE})
  message("
-----------------------------------------------------------
ADDING TESTING ENVIRONMENT...
")
endif()

include(CTest)
enable_testing()
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_FULL_VERSION})
include(CPack)

message(
  STATUS
  "CTEST/CPACK STATUS: \"${CPACK_PROJECT_NAME}\" VERSION \"${CPACK_PROJECT_VERSION}\"."
)

if(${VERBOSE})
  message("
TESTING ENVIRONMENT ADDED
-----------------------------------------------------------")
endif()

# ADD SOURCE FILES MPE LIBRARY .CPP FILES
include("${PROJECT_SOURCE_DIR}/CMake/Source/mpe_source.cmake")

# ADD PLATFORM BASED MPE SOURCE FILES
include("${PROJECT_SOURCE_DIR}/CMake/Platform/Source/source_platform_mpe.cmake")

# CREATE MPE, LINK LIBRARIES, AND INCLUDE DIRECTORIES, AND INSTALL PROPERTIES
include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/build_platform_mpe.cmake")

# PUBLIC INCLUDES
set(MPE_PUBLIC_INCLUDES
  "${PROJECT_SOURCE_DIR}"
  "${PROJECT_SOURCE_DIR}/MPE"
)

# DOUBLE CHECKS IF THE SYSTEM IS RUNNING ON WINDOWS-X64 SYSTEM
if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
  message(STATUS "SIZE OF VOID POINTER: ${CMAKE_SIZEOF_VOID_P}")

  if(CROSS_COMPILATION)
    message(STATUS
      "\n-----------------------------------------------------------\n\tMPE DOES NOT OFFICIALLY SUPPORT NON X64 SYSTEMS.\n-----------------------------------------------------------")
  else()
    message(FATAL_ERROR "MPE SUPPORTS X64 SYSTEMS ONLY.")
    return()
  endif()
endif()

# TODO: Find a way to fix this issue without having to run a script or manually
# copying the dlls. install(SCRIPT
# "${CMAKE_CURRENT_SOURCE_DIR}/utils/core_copy_missing_dlls.cmake")

# ##############################################################################
# TESTS add_executable(TEST "${PROJECT_SOURCE_DIR}/Tests/Unit.cpp")

# file(GLOB_RECURSE TEST_CPP "${PROJECT_SOURCE_DIR}/Tests/*.cpp"
# #"${PROJECT_SOURCE_DIR}/Tests/Primitive/*.cpp" )

# file(GLOB_RECURSE TEST_H "${PROJECT_SOURCE_DIR}/Tests/*.h"
# #"${PROJECT_SOURCE_DIR}/Tests/Primitive/*.h" )

# # add_library(TEST_SRC STATIC ${TEST_CPP}) #
# target_include_directories(TEST_SRC PUBLIC ${TEST_H}) #
# target_link_libraries(TEST_SRC PUBLIC MPE) # target_link_libraries(TEST PUBLIC
# MPE) # target_link_libraries(TEST PUBLIC TEST_SRC)

# target_link_libraries(TEST PUBLIC MPE) target_include_directories(TEST PUBLIC
# ${TEST_CPP} ${TEST_H})

# ##############################################################################
message(STATUS "MPE/CMAKE SUCCESSFULLY FINISHED.")

# ADD MPE EDITOR SOURCE FILES
include("${PROJECT_SOURCE_DIR}/CMake/Source/editor_source.cmake")

# ADD PLATFORM BASED MPE SOURCE FILES
include("${PROJECT_SOURCE_DIR}/CMake/Platform/Source/source_platform_editor.cmake")

# CREATE MPE, LINK LIBRARIES, AND INCLUDE DIRECTORIES, AND INSTALL PROPERTIES
include("${PROJECT_SOURCE_DIR}/CMake/Platform/Build/build_platform_editor.cmake")

# PUBLIC INCLUDES
set(MPE_EDITOR_PUBLIC_INCLUDES
  "${PROJECT_SOURCE_DIR}"
  "${PROJECT_SOURCE_DIR}/Editor"
)

message(STATUS "MPE EDITOR/CMAKE SUCCESSFULLY FINISHED.")

# ##############################################################################
# TESTS AND EXAMPLES
if(${MAIN_TEST})
  add_subdirectory("${PROJECT_SOURCE_DIR}/Tests")
endif()

if(${EXAMPLES})
  add_subdirectory("${PROJECT_SOURCE_DIR}/Examples")
endif()

# ##############################################################################
# PROJECTS
if(MPE_PROJECTS)
  include("${PROJECT_SOURCE_DIR}/Projects/projects.cmake")
endif(MPE_PROJECTS)

message(STATUS "MPE PROJECTS/CMAKE SUCCESSFULLY FINISHED.")